version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=froggy_app
      # Add maintenance configuration
      - POSTGRES_INITDB_ARGS=--data-checksums
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Add initialization scripts
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
    command: >
      postgres
        -c max_connections=100
        -c shared_buffers=512MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=128MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=5242kB
        -c min_wal_size=1GB
        -c max_wal_size=4GB
        -c max_worker_processes=8
        -c max_parallel_workers_per_gather=4
        -c max_parallel_workers=8
        -c max_parallel_maintenance_workers=4
    deploy:
      resources:
        limits:
          memory: 1.5G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - '5000:5000'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/froggy_app
      - NODE_ENV=production
      - UPLOAD_MAX_FILE_SIZE=10485760  # 10MB max file size
      - UPLOAD_MAX_FILES=500           # Allow up to 500 files
      - PG_MAX_CONNECTIONS=20          # Connection pool size
    volumes:
      - app_uploads:/app/uploads
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 768M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Add pgAdmin for database management (optional, comment out if not needed)
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 256M

  # Add automatic backup service
  backup:
    image: postgres:15-alpine
    restart: always
    depends_on:
      - postgres
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=froggy_app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - BACKUP_RETENTION_DAYS=7
    entrypoint: 
      - /bin/sh
      - -c
      - |
        chmod +x /backup.sh
        echo "0 3 * * * /backup.sh" > /etc/crontabs/root
        crond -f -d 8

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/pgdata
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/uploads
  pgadmin_data:
    driver: local